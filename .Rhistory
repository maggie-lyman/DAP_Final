mutate(date = as.Date('1:364', origin = 2013-01-01))
View(dates)
dates <- 1:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
flights |>
group_by(year, month, day) |>
summarize()
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
flights_by_day <- flights |>
group_by(year, month, day) |>
mutate(date_count = 0:364)
flights_by_day <- flights |>
group_by(year, month, day)
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(avg_arr_delay = mean(arr_delay),
avg_dep_delay = mean(dep_delay)
)
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
dates <- 0:364 |>
tibble()
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
flights_by_day|>
mutate(day_count = 0:364)
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
flights_by_day|>
mutate(day_count = seq(0:364))
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
flights_by_day |>
mutate(day_count = seq(0:30))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
mutate(day_count = seq(0:30))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
mutate(day_count = seq(0:364))
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day  |>
mutate(day_count = seq(1:365))
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day  |>
mutate(day_count = seq(1:365))
dates |>
mutate(dates = as.Date('1:364', origin = 2013-01-01))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day  |>
mutate(day_count = seq(1:365),
prev_day = lag(day_count))
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01),)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day  |>
mutate(day_count = seq(1:365),
prev_day_arr_delay = lag(avg_arr_delay),
prev_day_dep_delay = lag(avg_dep_delay))
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01),)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01),)
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01))
dates <- seq(0:364)
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01))
dates <- 0:364
dates |>
mutate(
dates = as.Date('0:364', origin = 2013-01-01))
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day  |>
mutate(day_count = seq(1:365),
remainder =  day_count %% 2)
dates |>
mutate(
dates = as.Date('1:364', origin = 2013-01-01),)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
mutate(day_count = seq(1:365),
remainder =  ((day_count - 1) %% 2) + 1)
flights_48_hour_windows <- |>
dates <- 0:364
dates |>
mutate(
dates = as.Date('0:364', origin = 2013-01-01),)
View(diamonds)
View(diamonds)
View(flights_by_day)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
slide(182)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
slice(182)
flights_by_day <- flights |>
group_by(year, month, day) |>
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE),
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) |>
ungroup()
flights_by_day |>
slice(2)
dates <- 0:364
dates |>
mutate(date = as.Date('0:364', origin = (2013-01-01)
dates <- 0:364
dates |>
mutate(date = as.Date('0:364', origin = (2013-01-01))
top_dest <-
nycflights13::flights |>
count(dest, sort = TRUE) |>
head(10)
flights |>
semi_join(top_dest, join_by(dest)) |>
head(10)
flights |>
inner_join(top_dest, join_by(dest)) |>
head(10)
flights |>
group_by(dest) |>
mutate(count = n()) |>
filter(count >= 9705) |>
head(10)
prev.flights.delay <-  flights |>
group_by(origin, dest, month, day) |>
arrange(sched_dep_time) |>
summarize(arr_delay = arr_delay)
prev.flights.delay <- prev.flights.delay |>
mutate(prev_flight_delay = lag(arr_delay))
print(prev.flights.delay)
prev.flights.delay |>
ggplot(aes(x = prev_flight_delay, y = arr_delay)) +
geom_bin_2d() +
geom_smooth()
install.packages("bigrquery")
install.packages("bigrquery")
library(bigrquery)
library(tidyverse)
billing_and_proj_id <- "ganong-teaching-343718"
sql <- "SELECT
*
FROM `waze-public-dataset.partner_UniversityofChicago.view_alerts_clustered`
WHERE city = 'Chicago, IL' AND date(ts) = '2023-02-01'"
tbl_waze <- bq_project_query(billing_and_proj_id, sql)
install.packages("bigrquery")
library(bigrquery)
library(tidyverse)
billing_and_proj_id <- "ganong-teaching-343718"
sql <- "SELECT
*
FROM `waze-public-dataset.partner_UniversityofChicago.view_alerts_clustered`
WHERE city = 'Chicago, IL' AND date(ts) = '2023-02-01'"
tbl_waze <- bq_project_query(billing_and_proj_id, sql)
install.packages("bigrquery")
install.packages("bigrquery")
library(bigrquery)
library(tidyverse)
billing_and_proj_id <- "ganong-teaching-343718"
sql <- "SELECT
*
FROM `waze-public-dataset.partner_UniversityofChicago.view_alerts_clustered`
WHERE city = 'Chicago, IL' AND date(ts) = '2023-02-01'"
tbl_waze <- bq_project_query(billing_and_proj_id, sql)
install.packages("bigrquery")
library(bigrquery)
library(tidyverse)
billing_and_proj_id <- "ganong-teaching-343718"
sql <- "SELECT
*
FROM `waze-public-dataset.partner_UniversityofChicago.view_alerts_clustered`
WHERE city = 'Chicago, IL' AND date(ts) = '2023-02-01'"
tbl_waze <- bq_project_query(billing_and_proj_id, sql)
install.packages("bigrquery")
library(shiny); runApp('Downloads/lecture6_shiny1.R')
runApp('Downloads/lecture6_shiny1.R')
runApp('Downloads/lecture6_shiny1.R')
runApp('Downloads/lecture6_shiny2.R')
runApp('Downloads/lecture6_shiny3.R')
runApp('Downloads/lecture6_shiny3.R')
runApp('Downloads/lecture6_shiny3.R')
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
verbatimTextOutput("stats"),
plotOutput("hist")
)
server <- function(input, output) {
data <- reactive({
rnorm(input$num)
})
output$hist <- renderPlot({
hist(result(),
xlab = "Values",
main = "Random normal distribution")
})
output$stats <- renderPrint({
summary(result())
})
}
shinyApp(ui = ui, server = server)
runApp('Downloads/lecture6_shiny3.R')
runApp('Downloads/lecture6_shiny1.R')
library(tidyverse)
library(shiny)
runApp('Downloads/lecture6_shiny3.R')
runApp('Downloads/lecture6_shiny3.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
runApp('Downloads/lecture6_lab.R')
library(shiny); runApp('Downloads/Lecture8_materials/lecture8_squareroot_2.R')
runApp('Downloads/Lecture8_materials/lecture8_squareroot_2.R')
runApp('Downloads/Lecture8_materials/lecture8_squareroot_2.R')
runApp('Downloads/Lecture8_materials/lecture8_squareroot_2.R')
runApp('Downloads/Lecture8_materials/lecture7_labsolution_dynamic.R')
shinyApp(ui = ui, server = server)
ui <- fluidPage(
useShinyFeedback(),
numericInput(inputId = "n",
label= "Enter a number, n, and I will tell you the value of 1/n",
value = 1),
textOutput(outputId = "one_over_n")
)
server <- function(input, output) {
value <- reactive({
is_non_zero <- input$n != 0
feedbackWarning("n", !is_non_zero, "Please enter a non-zero number")
req(is_non_zero)
1/(input$n)
})
output$one_over_n <- renderText(
paste0("The value of 1/ ", input$n, " is ", value(), "!"))
}
shinyApp(ui = ui, server = server)
runApp('Desktop/Wagner - lecture8lab.R')
runApp('Desktop/Wagner - lecture8lab.R')
runApp('Desktop/Wagner - lecture8lab.R')
runApp('Desktop/Wagner - lecture8lab.R')
runApp('Desktop/Wagner - lecture8lab.R')
runApp('Desktop/Wagner - lecture8lab.R')
setwd("~/Desktop")
library(tidyverse)
credit_data <- read.csv("assignment2data.xlsx - assignment_2_data.csv")
View(credit_data)
View(credit_data)
replace(credit_data$Underlying.Moodys.Rating, Underlying.Moodys.Rating == "Aa1", "AA+")
replace(credit_data$Underlying.Moodys.Rating, credit_data$Underlying.Moodys.Rating == "Aa1", "AA+")
View(credit_data)
credit_data <- replace(credit_data$Underlying.Moodys.Rating, credit_data$Underlying.Moodys.Rating == "Aa1", "AA+")
credit_data <- read.csv("assignment2data.xlsx - assignment_2_data.csv")
credit_data <- credit_data |>
replace(Underlying.Moodys.Rating, Underlying.Moodys.Rating == "Aa1", "AA+")
?replace
credit_data <- credit_data |>
mutate(Rating = recode(Rating,
"Aa1" = "AA+"))
credit_data <- read.csv("assignment2data.xlsx - assignment_2_data.csv")
credit_data <- credit_data |>
mutate(Rating = recode(Rating,
"Aa1" = "AA+"))
credit_data <- credit_data |>
mutate(Underlying.Moodys.Rating = recode(Underlying.Moodys.Rating,
"Aa1" = "AA+"))
View(credit_data)
setwd("~/Documents/GitHub/DAP_Final")
source("~/Desktop/Muni_data.R")
credit_data <- credit_data |>
mutate(Underlying.Moodys.Rating = recode(Underlying.Moodys.Rating,
"Aa1" = "AA+",
"Aa2" = "AA",
"Aa3" = "AA-",
"A1" = "A+",
"A2" = "A",
"A3" = "A-",
"Baa1" = "BBB+",
"Baa2" = "BBB",
"Baa3" = "BBB-",
"Ba" = "BB",
"Caa" = "CCC",
"Ca" = "CC"
))
View(credit_data)
View(credit_data)
# Change the Moody's ratings to the same scale as Fitch and S&P
credit_data <- credit_data |>
mutate(Underlying.Moodys.Rating = recode(Underlying.Moodys.Rating,
"Aaa" = "AAA"
"Aa1" = "AA+",
# Change the Moody's ratings to the same scale as Fitch and S&P
credit_data <- credit_data |>
mutate(Underlying.Moodys.Rating = recode(Underlying.Moodys.Rating,
"Aaa" = "AAA",
"Aa1" = "AA+",
"Aa2" = "AA",
"Aa3" = "AA-",
"A1" = "A+",
"A2" = "A",
"A3" = "A-",
"Baa1" = "BBB+",
"Baa2" = "BBB",
"Baa3" = "BBB-",
"Ba" = "BB",
"Caa" = "CCC",
"Ca" = "CC"
))
# Filter for only post 2018
credit_data <- credit_data |>
filter(Fiscal.Year.End > '01-01-2018')
View(credit_data)
# Filter for only post 2018
credit_data <- credit_data |>
mdy(Fiscal.Year.End) |>
filter(Fiscal.Year.End > '01-01-2018')
# Filter for only post 2018
credit_data <- credit_data |>
mdy(Fiscal.Year.End)
# Filter for only post 2018
credit_data <- credit_data |>
as.Date(Fiscal.Year.End, format = "%m/%d/%Y") |>
filter(Fiscal.Year.End > '01-01-2018')
# Filter for only post 2018
credit_data <- credit_data |>
as.Date(credit_data$Fiscal.Year.End, format = "%m/%d/%Y") |>
filter(Fiscal.Year.End > '01-01-2018')
# Filter for only post 2018
credit_data$Fiscal.Year.End <- as.Date(credit_data$Fiscal.Year.End, format = "%m/%d/%Y")
View(credit_data)
credit_data <- credit_data |>
filter(Fiscal.Year.End > '2018-01-01')
View(credit_data)
# Remove short-term ratings
credit_data |>
unique(Underlying.Moodys.Rating)
# Remove short-term ratings
credit_data |>
unique(Underlying.Moodys.Rating)
credit_data |>
unique(Underlying.Moodys.Rating)
# Remove short-term ratings
credit_data |>
unique(Underlying.Moodys.Rating)
# Remove short-term ratings
unique(credit_data$Underlying.Moodys.Rating)
# Remove short-term ratings
credit_data <- credit_data |>
filter(Underlying.Moodys.Rating != "M1G1" |
Underlying.Moodys.Rating != "Aa2;M1G1" |
Underlying.Moodys.Rating != "Ba3")
unique(credit_data$Underlying.Moodys.Rating)
# Remove short-term ratings
credit_data <- credit_data |>
filter(Underlying.Moodys.Rating != "MIG1" |
Underlying.Moodys.Rating != "Aa2;MIG1" |
Underlying.Moodys.Rating != "Ba3" |
Underlying.Moodys.Rating != "Ba1")
unique(credit_data$Underlying.Moodys.Rating)
# Remove short-term ratings
credit_data <- credit_data |>
filter(Underlying.Moodys.Rating != "MIG1" &
Underlying.Moodys.Rating != "Aa2;MIG1" &
Underlying.Moodys.Rating != "Ba3" &
Underlying.Moodys.Rating != "Ba1")
unique(credit_data$Underlying.Moodys.Rating)
unique(credit_data$Underlying.Fitch.Rating)
unique(credit_data$Underlying.S...P.Rating)
# Remove short-term ratings
credit_data <- credit_data |>
filter(Underlying.Moodys.Rating != "MIG1" &
Underlying.Moodys.Rating != "Aa2;MIG1" &
Underlying.Moodys.Rating != "Ba3" &
Underlying.Moodys.Rating != "Ba1" &
Underlying.Fitch.Rating != "F1+" &
Underlying.S...P.Rating != "SP-1+" &
Underlying.S...P.Rating != "SP-1" &
Underlying.S...P.Rating != "AA-;SP-1+" &
Underlying.S...P.Rating != "BBB+;NR")
unique(credit_data$Underlying.S...P.Rating)
View(credit_data)
View(credit_data)
write_csv(credit_data, "/Users/maxwellwagner/Documents/pset2/credit_data.csv")
